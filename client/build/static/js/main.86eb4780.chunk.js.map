{"version":3,"sources":["App.js","index.js"],"names":["App","useState","yourID","setYourID","users","setUsers","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","vidSrc","setVidSrc","userVideo","useRef","partnerVideo","socket","useEffect","current","io","connect","on","id","data","from","signal","className","onSubmit","e","preventDefault","navigator","mediaDevices","getUserMedia","video","audio","then","srcObject","catch","window","alert","getDisplayMedia","name","onChange","target","value","disabled","selected","type","width","playsInline","muted","ref","autoPlay","controls","Object","keys","map","key","onClick","peer","Peer","initiator","trickle","emit","userToCall","signalData","callPeer","role","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LA8NeA,MA1Nf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACJC,EADI,KACIC,EADJ,OAEeF,mBAAS,IAFxB,mBAEJG,EAFI,KAEGC,EAFH,OAGiBJ,qBAHjB,mBAGJK,EAHI,KAGIC,EAHJ,OAI+BN,oBAAS,GAJxC,mBAIJO,EAJI,KAIWC,EAJX,OAKiBR,mBAAS,IAL1B,mBAKJS,EALI,KAKIC,EALJ,OAM6BV,qBAN7B,mBAMJW,EANI,KAMUC,EANV,OAO6BZ,oBAAS,GAPtC,mBAOJa,EAPI,KAOUC,EAPV,OAQiBd,qBARjB,mBAQJe,EARI,KAQIC,EARJ,KAULC,EAAYC,mBACZC,EAAeD,mBACfE,EAASF,mBAiGf,OA/FAG,qBAAU,WAIND,EAAOE,QAAUC,IAAGC,QAAQ,2BAE5BJ,EAAOE,QAAQG,GAAG,UAAU,SAACC,GACzBxB,EAAUwB,MAGdN,EAAOE,QAAQG,GAAG,YAAY,SAACtB,GAC3BC,EAASD,MAIbiB,EAAOE,QAAQG,GAAG,OAAO,SAACE,GACtBnB,GAAiB,GACjBE,EAAUiB,EAAKC,MACfhB,EAAgBe,EAAKE,aAE1B,IA4EC,oCACI,yBAAKC,UAAU,+BACX,yBAAKA,UAAU,aACX,0BAAMA,UAAU,6BAAhB,gBAKR,yBAAKA,UAAU,aACX,wBAAIA,UAAU,OAAd,yBACA,0BAAMC,SApCG,SAACC,GAClBA,EAAEC,iBACa,QAAXlB,EACAmB,UAAUC,aACLC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IACnCC,MAAK,SAAClC,GACHC,EAAUD,GACVY,EAAUK,QAAQkB,UAAYnC,KAEjCoC,OAAM,WACHC,OAAOC,MAAM,2BAEH,WAAX5B,GACPmB,UAAUC,aACLS,gBAAgB,CAAEP,OAAO,EAAMC,OAAO,IACtCC,MAAK,SAAClC,GACHC,EAAUD,GACVY,EAAUK,QAAQkB,UAAYnC,KAEjCoC,OAAM,WACHC,OAAOC,MAAM,kCAgBab,UAAU,oBACpC,yBAAKA,UAAU,cACX,4BACIe,KAAK,SACLC,SAAU,SAACd,GAAD,OAAOhB,EAAUgB,EAAEe,OAAOC,QACpCA,MAAOjC,EACPe,UAAU,qBAEV,4BAAQmB,UAAQ,EAACC,UAAQ,GAAzB,UAGA,4BAAQF,MAAM,OAAd,UACA,4BAAQA,MAAM,UAAd,kBAGR,4BAAQG,KAAK,SAASrB,UAAU,iBAAhC,WAIJ,6BACCf,GAAUV,GACP,yBAAKyB,UAAU,QACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,oBACX,+CACA,6BACCzB,EACG,2BACI+C,MAAM,MACNC,aAAW,EACXC,OAAK,EACLC,IAAKtC,EACLuC,UAAQ,EACR1B,UAAU,iBAGd,+DAGR,yBAAKA,UAAU,oBACX,oDACA,6BACCjB,EACG,2BACIuC,MAAM,MACNC,aAAW,EACXE,IAAKpC,EACLqC,UAAQ,EACRC,UAAQ,EACR3B,UAAU,iBAGd,uDAIZ,6BACA,6BACI,wDACC4B,OAAOC,KAAKxD,GAAOyD,KAAI,SAACC,GACrB,OAAIA,IAAQ5D,EAAe,KAEvB,4BACI6D,QAAS,kBAnJ5B,SAACpC,GACd,IAAMqC,EAAO,IAAIC,IAAK,CAClBC,WAAW,EACXC,SAAS,EACT7D,OAAQA,IAIZ0D,EAAKtC,GAAG,UAAU,SAACE,GACfP,EAAOE,QAAQ6C,KAAK,WAAY,CAC5BC,WAAY1C,EACZ2C,WAAY1C,EACZC,KAAM3B,OAKd8D,EAAKtC,GAAG,UAAU,SAACpB,GACfc,EAAaG,QAAQkB,UAAYnC,KAGrCe,EAAOE,QAAQG,GAAG,gBAAgB,SAACI,GAC/Bf,GAAgB,GAChBiD,EAAKlC,OAAOA,MA4H+ByC,CAAST,IACxBA,IAAKA,EACL/B,UAAU,2BAHd,QAKU+B,OAKtB,oCACKtD,GACG,6BACI,6BACA,uBACIuB,UAAU,sBACVyC,KAAK,SAEJ9D,EAJL,mBAMA,4BACIqD,QA5IjB,WACfhD,GAAgB,GAChB,IAAMiD,EAAO,IAAIC,IAAK,CAClBC,WAAW,EACXC,SAAS,EACT7D,OAAQA,IAGZ0D,EAAKtC,GAAG,UAAU,SAACE,GACfP,EAAOE,QAAQ6C,KAAK,aAAc,CAAEtC,OAAQF,EAAM6C,GAAI/D,OAI1DsD,EAAKtC,GAAG,UAAU,SAACpB,GACfc,EAAaG,QAAQkB,UAAYnC,KAIrC0D,EAAKlC,OAAOlB,IA2HoBmB,UAAU,iBAFd,gBCzMpC2C,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,U","file":"static/js/main.86eb4780.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\n\r\nfunction App() {\r\n    const [yourID, setYourID] = useState(\"\");\r\n    const [users, setUsers] = useState({});\r\n    const [stream, setStream] = useState();\r\n    const [receivingCall, setReceivingCall] = useState(false);\r\n    const [caller, setCaller] = useState(\"\");\r\n    const [callerSignal, setCallerSignal] = useState();\r\n    const [callAccepted, setCallAccepted] = useState(false);\r\n    const [vidSrc, setVidSrc] = useState();\r\n\r\n    const userVideo = useRef();\r\n    const partnerVideo = useRef();\r\n    const socket = useRef();\r\n\r\n    useEffect(() => {\r\n        // socket.current = io.connect(\"https://share.ssebs.com\", {\r\n        //     transports: [\"polling\"],\r\n        // });\r\n        socket.current = io.connect(\"https://share.ssebs.com\");\r\n        // When you get your id\r\n        socket.current.on(\"yourID\", (id) => {\r\n            setYourID(id);\r\n        });\r\n        // When the userlist is updated\r\n        socket.current.on(\"allUsers\", (users) => {\r\n            setUsers(users);\r\n        });\r\n\r\n        // Someone is calling you\r\n        socket.current.on(\"hey\", (data) => {\r\n            setReceivingCall(true);\r\n            setCaller(data.from);\r\n            setCallerSignal(data.signal);\r\n        });\r\n    }, []);\r\n\r\n    const callPeer = (id) => {\r\n        const peer = new Peer({\r\n            initiator: true,\r\n            trickle: false,\r\n            stream: stream,\r\n        });\r\n\r\n        // tell peer you wanna talk\r\n        peer.on(\"signal\", (data) => {\r\n            socket.current.emit(\"callUser\", {\r\n                userToCall: id,\r\n                signalData: data,\r\n                from: yourID,\r\n            });\r\n        });\r\n\r\n        // on recv stream\r\n        peer.on(\"stream\", (stream) => {\r\n            partnerVideo.current.srcObject = stream;\r\n        });\r\n\r\n        socket.current.on(\"callAccepted\", (signal) => {\r\n            setCallAccepted(true);\r\n            peer.signal(signal);\r\n        });\r\n    };\r\n\r\n    const acceptCall = () => {\r\n        setCallAccepted(true);\r\n        const peer = new Peer({\r\n            initiator: false,\r\n            trickle: false,\r\n            stream: stream,\r\n        });\r\n        // on peer connect\r\n        peer.on(\"signal\", (data) => {\r\n            socket.current.emit(\"acceptCall\", { signal: data, to: caller });\r\n        });\r\n\r\n        // on recv stream\r\n        peer.on(\"stream\", (stream) => {\r\n            partnerVideo.current.srcObject = stream;\r\n        });\r\n\r\n        // send to peer that you're ready\r\n        peer.signal(callerSignal);\r\n    };\r\n\r\n    const chooseSource = (e) => {\r\n        e.preventDefault();\r\n        if (vidSrc === \"cam\") {\r\n            navigator.mediaDevices\r\n                .getUserMedia({ video: true, audio: false })\r\n                .then((stream) => {\r\n                    setStream(stream);\r\n                    userVideo.current.srcObject = stream;\r\n                })\r\n                .catch(() => {\r\n                    window.alert(\"Could not get camera\");\r\n                });\r\n        } else if (vidSrc === \"screen\") {\r\n            navigator.mediaDevices\r\n                .getDisplayMedia({ video: true, audio: false })\r\n                .then((stream) => {\r\n                    setStream(stream);\r\n                    userVideo.current.srcObject = stream;\r\n                })\r\n                .catch(() => {\r\n                    window.alert(\"Could not get screen share\");\r\n                });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <nav className=\"navbar navbar-dark bg-ssebs\">\r\n                <div className=\"container\">\r\n                    <span className=\"navbar-brand mb-0 h1 px-3\">\r\n                        ssebsShare\r\n                    </span>\r\n                </div>\r\n            </nav>\r\n            <div className=\"container\">\r\n                <h5 className=\"m-3\">Choose a Video Source</h5>\r\n                <form onSubmit={chooseSource} className=\"form-inline my-3\">\r\n                    <div className=\"form-group\">\r\n                        <select\r\n                            name=\"source\"\r\n                            onChange={(e) => setVidSrc(e.target.value)}\r\n                            value={vidSrc}\r\n                            className=\"form-control mx-3\"\r\n                        >\r\n                            <option disabled selected>\r\n                                Source\r\n                            </option>\r\n                            <option value=\"cam\">Camera</option>\r\n                            <option value=\"screen\">Screen Share</option>\r\n                        </select>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-ssebs\">\r\n                        Select\r\n                    </button>\r\n                </form>\r\n                <hr />\r\n                {vidSrc && stream && (\r\n                    <div className=\"mx-3\">\r\n                        <div className=\"d-flex\">\r\n                            <div className=\"half text-center\">\r\n                                <strong>Your Video:</strong>\r\n                                <hr />\r\n                                {stream ? (\r\n                                    <video\r\n                                        width=\"500\"\r\n                                        playsInline\r\n                                        muted\r\n                                        ref={userVideo}\r\n                                        autoPlay\r\n                                        className=\"border-black\"\r\n                                    />\r\n                                ) : (\r\n                                    <div>You haven't selected a source</div>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"half text-center\">\r\n                                <strong>Partner's Video:</strong>\r\n                                <hr />\r\n                                {callAccepted ? (\r\n                                    <video\r\n                                        width=\"500\"\r\n                                        playsInline\r\n                                        ref={partnerVideo}\r\n                                        autoPlay\r\n                                        controls\r\n                                        className=\"border-black\"\r\n                                    />\r\n                                ) : (\r\n                                    <div>Not in a call yet...</div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <hr />\r\n                        <div>\r\n                            <p>All people on the server:</p>\r\n                            {Object.keys(users).map((key) => {\r\n                                if (key === yourID) return null;\r\n                                return (\r\n                                    <button\r\n                                        onClick={() => callPeer(key)}\r\n                                        key={key}\r\n                                        className=\"btn btn-outline-primary\"\r\n                                    >\r\n                                        Call {key}\r\n                                    </button>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                        <>\r\n                            {receivingCall && (\r\n                                <div>\r\n                                    <hr />\r\n                                    <p\r\n                                        className=\"alert alert-primary\"\r\n                                        role=\"alert\"\r\n                                    >\r\n                                        {caller} is calling you\r\n                                    </p>\r\n                                    <button\r\n                                        onClick={acceptCall}\r\n                                        className=\"btn btn-ssebs\"\r\n                                    >\r\n                                        Accept\r\n                                    </button>\r\n                                </div>\r\n                            )}\r\n                        </>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\"\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}